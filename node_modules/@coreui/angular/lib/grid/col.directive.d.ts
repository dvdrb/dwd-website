import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { ColOrder } from './col.type';
import * as i0 from "@angular/core";
export type ColOffsetType = number | {
    xs?: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
    xxl?: number;
};
export type ColOrderType = ColOrder | {
    xs?: ColOrder;
    sm?: ColOrder;
    md?: ColOrder;
    lg?: ColOrder;
    xl?: ColOrder;
    xxl?: ColOrder;
};
export declare class ColDirective {
    static ngAcceptInputType_cCol: BooleanInput | NumberInput;
    static ngAcceptInputType_xs: BooleanInput | NumberInput;
    static ngAcceptInputType_sm: BooleanInput | NumberInput;
    static ngAcceptInputType_md: BooleanInput | NumberInput;
    static ngAcceptInputType_lg: BooleanInput | NumberInput;
    static ngAcceptInputType_xl: BooleanInput | NumberInput;
    static ngAcceptInputType_xxl: BooleanInput | NumberInput;
    /**
     * The number of columns/offset/order on extra small devices (<576px).
     * @return { 'auto' | number |  boolean }
     */
    readonly cCol: import("@angular/core").InputSignalWithTransform<number | boolean | "auto", string | number | boolean | null | undefined>;
    readonly xs: import("@angular/core").InputSignalWithTransform<number | boolean | "auto", string | number | boolean | null | undefined>;
    /**
     * The number of columns/offset/order on small devices (<768px).
     * @return { 'auto' | number |  boolean }
     */
    readonly sm: import("@angular/core").InputSignalWithTransform<number | boolean | "auto", string | number | boolean | null | undefined>;
    /**
     * The number of columns/offset/order on medium devices (<992px).
     * @return { 'auto' | number |  boolean }
     */
    readonly md: import("@angular/core").InputSignalWithTransform<number | boolean | "auto", string | number | boolean | null | undefined>;
    /**
     * The number of columns/offset/order on large devices (<1200px).
     * @return { 'auto' | number |  boolean }
     */
    readonly lg: import("@angular/core").InputSignalWithTransform<number | boolean | "auto", string | number | boolean | null | undefined>;
    /**
     * The number of columns/offset/order on X-Large devices (<1400px).
     * @return { 'auto' | number |  boolean }
     */
    readonly xl: import("@angular/core").InputSignalWithTransform<number | boolean | "auto", string | number | boolean | null | undefined>;
    /**
     * The number of columns/offset/order on XX-Large devices (≥1400px).
     * @return { 'auto' | number |  boolean }
     */
    readonly xxl: import("@angular/core").InputSignalWithTransform<number | boolean | "auto", string | number | boolean | null | undefined>;
    readonly breakpoints: import("@angular/core").Signal<Record<string, any>>;
    readonly offset: import("@angular/core").InputSignal<ColOffsetType | undefined>;
    readonly order: import("@angular/core").InputSignal<ColOrderType | undefined>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    coerceInput(value: BooleanInput | NumberInput): number | boolean | "auto";
    static ɵfac: i0.ɵɵFactoryDeclaration<ColDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ColDirective, "[cCol]", never, { "cCol": { "alias": "cCol"; "required": false; "isSignal": true; }; "xs": { "alias": "xs"; "required": false; "isSignal": true; }; "sm": { "alias": "sm"; "required": false; "isSignal": true; }; "md": { "alias": "md"; "required": false; "isSignal": true; }; "lg": { "alias": "lg"; "required": false; "isSignal": true; }; "xl": { "alias": "xl"; "required": false; "isSignal": true; }; "xxl": { "alias": "xxl"; "required": false; "isSignal": true; }; "offset": { "alias": "offset"; "required": false; "isSignal": true; }; "order": { "alias": "order"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
