import { OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { TemplateIdDirective } from '../../shared';
import * as i0 from "@angular/core";
export declare class AccordionItemComponent implements OnInit, OnDestroy {
    #private;
    /**
     * Toggle an accordion item programmatically
     * @return boolean
     * @default false
     */
    readonly visibleInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly itemVisible: import("@angular/core").WritableSignal<boolean>;
    set visible(value: boolean);
    get visible(): boolean;
    contentId: string;
    get itemContext(): {
        $implicit: boolean;
    };
    readonly contentTemplates: import("@angular/core").Signal<readonly TemplateIdDirective[]>;
    readonly templates: import("@angular/core").Signal<Record<string, TemplateRef<any>>>;
    ngOnInit(): void;
    ngOnDestroy(): void;
    toggleItem(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccordionItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccordionItemComponent, "c-accordion-item", ["cAccordionItem"], { "visibleInput": { "alias": "visible"; "required": false; "isSignal": true; }; }, {}, ["contentTemplates"], ["*", "*"], true, never>;
}
