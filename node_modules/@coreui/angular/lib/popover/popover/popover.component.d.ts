import { OnDestroy, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class PopoverComponent implements OnDestroy {
    #private;
    readonly renderer: Renderer2;
    /**
     * Content of popover
     * @return {string | TemplateRef}
     */
    readonly content: import("@angular/core").InputSignal<string | TemplateRef<any>>;
    /**
     * Toggle the visibility of popover component.
     * @return boolean
     */
    readonly visible: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly id: import("@angular/core").InputSignal<string | undefined>;
    readonly role: import("@angular/core").InputSignal<string>;
    readonly viewContainerRef: import("@angular/core").Signal<ViewContainerRef | undefined>;
    private textNode;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    ngOnDestroy(): void;
    private clear;
    private updateView;
    static ɵfac: i0.ɵɵFactoryDeclaration<PopoverComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PopoverComponent, "c-popover", never, { "content": { "alias": "content"; "required": false; "isSignal": true; }; "visible": { "alias": "visible"; "required": false; "isSignal": true; }; "id": { "alias": "id"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
