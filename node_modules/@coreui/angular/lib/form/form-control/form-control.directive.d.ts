import { OnInit } from '@angular/core';
import { InputType } from '../../coreui.types';
import * as i0 from "@angular/core";
export declare class FormControlDirective implements OnInit {
    #private;
    /**
     * Size the component small or large.
     * @default undefined
     */
    readonly sizing: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Set component validation state to valid.
     * @default undefined
     */
    readonly valid: import("@angular/core").InputSignal<boolean | undefined>;
    /**
     * Specifies the type of input element.
     */
    readonly type: import("@angular/core").InputSignal<Omit<InputType, "checkbox" | "radio">>;
    /**
     * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use alongside `readonly`
     * @default false
     */
    readonly plaintext: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    get hostTag(): string;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormControlDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FormControlDirective, "input[cFormControl], textarea[cFormControl]", never, { "sizing": { "alias": "sizing"; "required": false; "isSignal": true; }; "valid": { "alias": "valid"; "required": false; "isSignal": true; }; "type": { "alias": "type"; "required": false; "isSignal": true; }; "plaintext": { "alias": "plaintext"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
