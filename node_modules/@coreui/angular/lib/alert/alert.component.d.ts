import { TemplateRef } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { TemplateIdDirective } from '../shared';
import * as i0 from "@angular/core";
type AnimateType = 'hide' | 'show';
export declare class AlertComponent {
    #private;
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     * @return Colors
     * @default 'primary'
     */
    readonly color: import("@angular/core").InputSignal<string>;
    /**
     * Default role for alert. [docs]
     * @return string
     * @default 'alert'
     */
    readonly role: import("@angular/core").InputSignal<string>;
    /**
     * Set the alert variant to a solid.
     * @return string
     */
    readonly variant: import("@angular/core").InputSignal<"solid" | undefined>;
    /**
     * Optionally adds a close button to alert and allow it to self dismiss.
     * @return boolean
     * @default false
     */
    readonly dismissibleInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    set dismissible(value: boolean);
    get dismissible(): boolean;
    /**
     * Adds animation for dismissible alert.
     * @return boolean
     */
    readonly fade: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Toggle the visibility of alert component.
     * @return boolean
     */
    readonly visibleInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    set visible(value: boolean);
    get visible(): boolean;
    readonly hide: import("@angular/core").WritableSignal<boolean>;
    /**
     * Event triggered on the alert dismiss.
     */
    readonly visibleChange: import("@angular/core").OutputEmitterRef<boolean>;
    readonly contentTemplates: import("@angular/core").Signal<readonly TemplateIdDirective[]>;
    readonly templates: import("@angular/core").Signal<Record<string, TemplateRef<any>>>;
    get animateType(): AnimateType;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    onAnimationStart($event: AnimationEvent): void;
    onAnimationDone($event: AnimationEvent): void;
    onAnimationEvent(event: AnimationEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AlertComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AlertComponent, "c-alert", ["cAlert"], { "color": { "alias": "color"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; "variant": { "alias": "variant"; "required": false; "isSignal": true; }; "dismissibleInput": { "alias": "dismissible"; "required": false; "isSignal": true; }; "fade": { "alias": "fade"; "required": false; "isSignal": true; }; "visibleInput": { "alias": "visible"; "required": false; "isSignal": true; }; }, { "visibleChange": "visibleChange"; }, ["contentTemplates"], ["*"], true, never>;
}
export {};
