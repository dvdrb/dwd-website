import { ProgressBarComponent } from './progress-bar.component';
import { ProgressBarDirective } from './progress-bar.directive';
import * as i0 from "@angular/core";
import * as i1 from "./progress-bar.directive";
export declare class ProgressComponent {
    #private;
    protected readonly progressBarDirective: ProgressBarDirective | null;
    constructor();
    readonly stacked: import("@angular/core").WritableSignal<boolean>;
    readonly percent: import("@angular/core").Signal<number>;
    readonly value: import("@angular/core").WritableSignal<number | undefined>;
    readonly contentProgressBars: import("@angular/core").Signal<readonly ProgressBarComponent[]>;
    /**
     * Sets the height of the component. If you set that value the inner `<CProgressBar>` will automatically resize accordingly.
     * @return number
     */
    readonly height: import("@angular/core").InputSignalWithTransform<number, unknown>;
    /**
     * Displays thin progress.
     * @return boolean
     */
    readonly thin: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Change the default color to white.
     * @return boolean
     */
    readonly white: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    readonly hostStyle: import("@angular/core").Signal<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProgressComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProgressComponent, "c-progress", ["cProgress"], { "height": { "alias": "height"; "required": false; "isSignal": true; }; "thin": { "alias": "thin"; "required": false; "isSignal": true; }; "white": { "alias": "white"; "required": false; "isSignal": true; }; }, {}, ["contentProgressBars"], ["*"], true, [{ directive: typeof i1.ProgressBarDirective; inputs: { "animated": "animated"; "color": "color"; "max": "max"; "role": "role"; "value": "value"; "variant": "variant"; }; outputs: {}; }]>;
}
