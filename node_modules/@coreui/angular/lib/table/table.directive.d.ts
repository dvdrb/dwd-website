import * as i0 from "@angular/core";
export declare class TableDirective {
    #private;
    /**
     * Set the vertical alignment.
     * @return string
     * @values 'bottom' | 'middle' | 'top'
     */
    readonly align: import("@angular/core").InputSignal<"top" | "middle" | "bottom" | undefined>;
    /**
     * Sets the border color of the component to one of CoreUI’s themed colors.
     * @return Colors
     */
    readonly borderColor: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Add borders on all sides of the table and cells.
     * @return boolean
     */
    readonly bordered: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Remove borders on all sides of the table and cells.
     * @return boolean
     */
    readonly borderless: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Put the `<caption>` on the top of the table.
     * @return 'top'
     * @values 'top'
     */
    readonly caption: import("@angular/core").InputSignal<"top" | undefined>;
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     * @return Colors
     */
    readonly color: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Enable a hover state on table rows within table body.
     * @return boolean
     */
    readonly hover: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Make table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.
     * @values: {boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'}
     */
    readonly responsive: import("@angular/core").InputSignal<boolean | Omit<string, "xs"> | undefined>;
    /**
     * Make table more compact by cutting all cell `padding` in half.
     * @return boolean
     */
    readonly small: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Add zebra-striping to any table row within the table body.
     * @return boolean
     */
    readonly striped: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Add zebra-striping to any table column.
     * @return boolean
     * @since 4.2.4
     */
    readonly stripedColumns: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<TableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TableDirective, "table[cTable]", ["cTable"], { "align": { "alias": "align"; "required": false; "isSignal": true; }; "borderColor": { "alias": "borderColor"; "required": false; "isSignal": true; }; "bordered": { "alias": "bordered"; "required": false; "isSignal": true; }; "borderless": { "alias": "borderless"; "required": false; "isSignal": true; }; "caption": { "alias": "caption"; "required": false; "isSignal": true; }; "color": { "alias": "color"; "required": false; "isSignal": true; }; "hover": { "alias": "hover"; "required": false; "isSignal": true; }; "responsive": { "alias": "responsive"; "required": false; "isSignal": true; }; "small": { "alias": "small"; "required": false; "isSignal": true; }; "striped": { "alias": "striped"; "required": false; "isSignal": true; }; "stripedColumns": { "alias": "stripedColumns"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
