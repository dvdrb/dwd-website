import { AfterViewInit } from '@angular/core';
import { DropdownComponent } from '../dropdown/dropdown.component';
import * as i0 from "@angular/core";
export declare class DropdownCloseDirective implements AfterViewInit {
    #private;
    dropdown?: DropdownComponent | null | undefined;
    /**
     * Disables a dropdown-close directive.
     * @return boolean
     * @default false
     */
    readonly disabledInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly disabled: import("@angular/core").WritableSignal<true | null>;
    readonly dropdownComponent: import("@angular/core").InputSignal<DropdownComponent | undefined>;
    ngAfterViewInit(): void;
    readonly tabIndexInput: import("@angular/core").InputSignal<string | number | null>;
    readonly tabIndex: import("@angular/core").WritableSignal<string | number | null>;
    onClick($event: MouseEvent): void;
    onKeyUp($event: KeyboardEvent): void;
    private handleToggle;
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownCloseDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DropdownCloseDirective, "[cDropdownClose]", ["cDropdownClose"], { "disabledInput": { "alias": "disabled"; "required": false; "isSignal": true; }; "dropdownComponent": { "alias": "dropdownComponent"; "required": false; "isSignal": true; }; "tabIndexInput": { "alias": "tabIndex"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
