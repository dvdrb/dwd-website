import { AnimationEvent } from '@angular/animations';
import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';
import * as i0 from "@angular/core";
export declare class ModalComponent implements OnInit, OnDestroy, AfterViewInit {
    #private;
    /**
     * Align the modal in the center or top of the screen.
     * @return {'top' | 'center'}
     * @default 'top'
     */
    readonly alignment: import("@angular/core").InputSignal<"top" | "center">;
    /**
     * Apply a backdrop on body while modal is open.
     * @return boolean | 'static'
     * @default true
     */
    readonly backdrop: import("@angular/core").InputSignal<boolean | "static">;
    /**
     * Set modal to cover the entire user viewport.
     * @return {boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'}
     * @default undefined
     */
    readonly fullscreen: import("@angular/core").InputSignal<boolean | "sm" | "md" | "lg" | "xl" | "xxl" | undefined>;
    /**
     * Closes the modal when escape key is pressed.
     * @return boolean
     * @default true
     */
    readonly keyboard: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly attrId: import("@angular/core").InputSignal<string | undefined>;
    get id(): string | undefined;
    /**
     * Size the component small, large, or extra large.
     * @return {'sm' | 'lg' | 'xl'}
     * @default undefined
     */
    readonly size: import("@angular/core").InputSignal<"sm" | "lg" | "xl" | undefined>;
    /**
     * Remove animation to create modal that simply appear rather than fade in to view.
     */
    readonly transition: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Default role for modal
     * @return string
     * @default 'dialog'
     */
    readonly role: import("@angular/core").InputSignal<string>;
    /**
     * Set aria-modal html attr for modal
     * @type boolean
     * @default null
     */
    readonly ariaModalInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly ariaModal: import("@angular/core").Signal<true | null>;
    /**
     * Create a scrollable modal that allows scrolling the modal body.
     * @return boolean
     * @default false
     */
    readonly scrollable: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Toggle the visibility of modal component.
     * @return boolean
     * @default false
     */
    readonly visibleInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    set visible(value: boolean);
    get visible(): boolean;
    /**
     * Event triggered on modal dismiss.
     * @return boolean
     */
    readonly visibleChange: import("@angular/core").OutputEmitterRef<boolean>;
    readonly modalContentRef: import("@angular/core").Signal<ElementRef<any> | undefined>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    get ariaHidden(): boolean | null;
    readonly animateTrigger: import("@angular/core").Signal<"hidden" | "visible">;
    get show(): boolean;
    set show(value: boolean);
    animateStart(event: AnimationEvent): void;
    animateDone(event: AnimationEvent): void;
    onKeyUpHandler(event: KeyboardEvent): void;
    private mouseDownTarget;
    onMouseDownHandler($event: MouseEvent): void;
    onClickHandler($event: MouseEvent): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private stateToggleSubscribe;
    private setBackdrop;
    private setBodyStyles;
    private setStaticBackdrop;
    static ɵfac: i0.ɵɵFactoryDeclaration<ModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ModalComponent, "c-modal", ["cModal"], { "alignment": { "alias": "alignment"; "required": false; "isSignal": true; }; "backdrop": { "alias": "backdrop"; "required": false; "isSignal": true; }; "fullscreen": { "alias": "fullscreen"; "required": false; "isSignal": true; }; "keyboard": { "alias": "keyboard"; "required": false; "isSignal": true; }; "attrId": { "alias": "id"; "required": false; "isSignal": true; }; "size": { "alias": "size"; "required": false; "isSignal": true; }; "transition": { "alias": "transition"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; "ariaModalInput": { "alias": "ariaModal"; "required": false; "isSignal": true; }; "scrollable": { "alias": "scrollable"; "required": false; "isSignal": true; }; "visibleInput": { "alias": "visible"; "required": false; "isSignal": true; }; }, { "visibleChange": "visibleChange"; }, never, ["*"], true, never>;
}
