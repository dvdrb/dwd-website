import * as i0 from "@angular/core";
export declare class ProgressBarDirective {
    #private;
    /**
     * Use to animate the stripes right to left via CSS3 animations.
     * @return boolean
     */
    readonly animated: import("@angular/core").InputSignalWithTransform<boolean | undefined, unknown>;
    /**
     * Sets the color context of the component to one of CoreUI’s themed colors.
     * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'
     */
    readonly color: import("@angular/core").InputSignal<string | undefined>;
    readonly precision: import("@angular/core").InputSignalWithTransform<number, unknown>;
    /**
     * The percent value the ProgressBar.
     * @return number
     * @default 0
     */
    readonly value: import("@angular/core").InputSignalWithTransform<number, unknown>;
    /**
     * Set the progress bar variant to optional striped.
     * @values 'striped'
     * @default undefined
     */
    readonly variant: import("@angular/core").InputSignal<"striped" | undefined>;
    /**
     * The max value of the ProgressBar.
     * @return number
     * @default 100
     */
    readonly max: import("@angular/core").InputSignalWithTransform<number, unknown>;
    /**
     * Set default html role attribute.
     * @return string
     */
    readonly role: import("@angular/core").InputSignal<string>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProgressBarDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProgressBarDirective, "[cProgressBar]", ["cProgressBar"], { "animated": { "alias": "animated"; "required": false; "isSignal": true; }; "color": { "alias": "color"; "required": false; "isSignal": true; }; "precision": { "alias": "precision"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": false; "isSignal": true; }; "variant": { "alias": "variant"; "required": false; "isSignal": true; }; "max": { "alias": "max"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
