import { FormCheckLabelDirective } from './form-check-label.directive';
import * as i0 from "@angular/core";
export declare class FormCheckComponent {
    /**
     * Group checkboxes or radios on the same horizontal row.
     * @default false
     */
    readonly inline: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Put checkboxes or radios on the opposite side.
     * @default false
     * @since 4.4.7
     */
    readonly reverse: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Size the component large or extra large. Works only with `[switch]="true"` [docs]
     * @default undefined
     */
    readonly sizing: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Render a toggle switch on for checkbox.
     * @type boolean
     * @default false
     */
    readonly switch: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly formCheckLabel: import("@angular/core").Signal<FormCheckLabelDirective | undefined>;
    readonly formCheckClass: import("@angular/core").Signal<boolean>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormCheckComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormCheckComponent, "c-form-check", ["cFormCheck"], { "inline": { "alias": "inline"; "required": false; "isSignal": true; }; "reverse": { "alias": "reverse"; "required": false; "isSignal": true; }; "sizing": { "alias": "sizing"; "required": false; "isSignal": true; }; "switch": { "alias": "switch"; "required": false; "isSignal": true; }; }, {}, ["formCheckLabel"], ["*"], true, never>;
}
