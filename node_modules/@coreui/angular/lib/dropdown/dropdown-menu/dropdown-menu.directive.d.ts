import { AfterContentInit, ElementRef, OnInit } from '@angular/core';
import { DropdownItemDirective } from '../dropdown-item/dropdown-item.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/theme.directive";
export declare class DropdownMenuDirective implements OnInit, AfterContentInit {
    #private;
    readonly elementRef: ElementRef;
    /**
     * Set alignment of dropdown menu.
     * @return 'start' | 'end'
     */
    readonly alignment: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Toggle the visibility of dropdown menu component.
     * @return boolean
     */
    readonly visibleInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly visible: import("@angular/core").WritableSignal<boolean>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    readonly hostStyles: import("@angular/core").Signal<Record<string, any>>;
    onKeyDown($event: KeyboardEvent): void;
    onKeyUp($event: KeyboardEvent): void;
    readonly dropdownItemsContent: import("@angular/core").Signal<readonly DropdownItemDirective[]>;
    readonly items$: import("rxjs").Observable<readonly DropdownItemDirective[]>;
    ngAfterContentInit(): void;
    ngOnInit(): void;
    private focusKeyManagerInit;
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownMenuDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DropdownMenuDirective, "[cDropdownMenu]", ["cDropdownMenu"], { "alignment": { "alias": "alignment"; "required": false; "isSignal": true; }; "visibleInput": { "alias": "visible"; "required": false; "isSignal": true; }; }, {}, ["dropdownItemsContent"], never, true, [{ directive: typeof i1.ThemeDirective; inputs: { "dark": "dark"; }; outputs: {}; }]>;
}
