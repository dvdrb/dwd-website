import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ISidebarAction } from '../sidebar.service';
import * as i0 from "@angular/core";
export declare class SidebarComponent implements OnChanges, OnDestroy, OnInit {
    #private;
    readonly state: import("@angular/core").WritableSignal<ISidebarAction>;
    /**
     * Sets if the color of text should be colored for a light or dark background.
     * @return 'dark' | 'light'
     */
    readonly colorScheme: import("@angular/core").InputSignal<"dark" | "light" | undefined>;
    /**
     * Sets html attribute id.
     * @return string
     */
    readonly id: import("@angular/core").InputSignal<string | undefined>;
    /**
     * Make sidebar narrow.
     * @return boolean
     * @default false
     */
    readonly narrowInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    set narrow(value: boolean);
    get narrow(): boolean;
    /**
     * Set sidebar to overlaid variant.
     * @return boolean
     * @default false
     */
    readonly overlaid: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /**
     * Components placement, there’s no default placement.
     * @return 'start' | 'end'
     */
    readonly placement: import("@angular/core").InputSignal<"start" | "end" | undefined>;
    /**
     * Place sidebar in non-static positions.
     * @return 'fixed' | 'sticky'
     * @default 'fixed'
     */
    readonly position: import("@angular/core").InputSignal<"fixed" | "sticky">;
    /**
     * Size the component small, large, or extra large.
     * @return 'sm' | 'lg' | 'xl'
     */
    readonly size: import("@angular/core").InputSignal<"sm" | "lg" | "xl" | undefined>;
    /**
     * Expand narrowed sidebar on hover.
     * @type boolean
     * @default false
     */
    readonly unfoldableInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly unfoldable: import("@angular/core").WritableSignal<boolean>;
    /**
     * Toggle the visibility of sidebar component.
     * @type boolean
     * @default false
     */
    readonly visibleInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    set visible(value: boolean);
    get visible(): boolean;
    /**
     * Event emitted on visibility change.
     * @return boolean
     */
    readonly visibleChange: import("@angular/core").OutputEmitterRef<boolean>;
    set sidebarState(value: ISidebarAction);
    get sidebarState(): ISidebarAction;
    get getMobileBreakpoint(): string;
    constructor();
    readonly hostClasses: import("@angular/core").Signal<{
        [x: string]: boolean | "toggle" | undefined;
        sidebar: boolean;
        'sidebar-fixed': boolean;
        'sidebar-narrow': boolean;
        'sidebar-narrow-unfoldable': boolean;
        'sidebar-overlaid': boolean;
        show: boolean | "toggle" | undefined;
        hide: boolean;
    }>;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setInitialState(): void;
    private stateToggleSubscribe;
    layoutChangeSubscribe(subscribe?: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SidebarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SidebarComponent, "c-sidebar", ["cSidebar"], { "colorScheme": { "alias": "colorScheme"; "required": false; "isSignal": true; }; "id": { "alias": "id"; "required": false; "isSignal": true; }; "narrowInput": { "alias": "narrow"; "required": false; "isSignal": true; }; "overlaid": { "alias": "overlaid"; "required": false; "isSignal": true; }; "placement": { "alias": "placement"; "required": false; "isSignal": true; }; "position": { "alias": "position"; "required": false; "isSignal": true; }; "size": { "alias": "size"; "required": false; "isSignal": true; }; "unfoldableInput": { "alias": "unfoldable"; "required": false; "isSignal": true; }; "visibleInput": { "alias": "visible"; "required": false; "isSignal": true; }; }, { "visibleChange": "visibleChange"; }, never, ["*"], true, never>;
}
