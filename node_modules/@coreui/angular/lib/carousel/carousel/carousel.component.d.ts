import { AfterContentInit, OnDestroy, OnInit } from '@angular/core';
import { Triggers } from '../../coreui.types';
import { CarouselConfig } from '../carousel.config';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/theme.directive";
export declare class CarouselComponent implements OnInit, OnDestroy, AfterContentInit {
    #private;
    private config;
    constructor(config: CarouselConfig);
    loadConfig(): void;
    /**
     * Index of the active item.
     * @return number
     */
    readonly activeIndexInput: import("@angular/core").InputSignal<number>;
    readonly activeIndex: import("@angular/core").WritableSignal<number>;
    /**
     * Carousel automatically starts cycle items.
     * @return boolean
     */
    readonly animateInput: import("@angular/core").InputSignal<boolean>;
    readonly animate: import("@angular/core").WritableSignal<boolean>;
    /**
     * Carousel direction. [docs]
     * @return {'next' | 'prev'}
     */
    readonly directionInput: import("@angular/core").InputSignal<"next" | "prev">;
    readonly direction: import("@angular/core").WritableSignal<"next" | "prev">;
    /**
     * The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.
     * @return number
     * @default 0
     */
    readonly intervalInput: import("@angular/core").InputSignal<number>;
    readonly interval: import("@angular/core").WritableSignal<number>;
    /**
     * Sets which event handlers you’d like provided to your pause prop. You can specify one trigger or an array of them.
     * @return {'hover' | 'focus' | 'click'}
     */
    readonly pause: import("@angular/core").InputSignal<false | Triggers | Triggers[]>;
    /**
     * Support left/right swipe interactions on touchscreen devices.
     * @return boolean
     * @default true
     */
    readonly touch: import("@angular/core").InputSignal<boolean>;
    /**
     * Set type of the transition.
     * @return {'slide' | 'crossfade'}
     * @default 'slide'
     */
    readonly transition: import("@angular/core").InputSignal<"slide" | "crossfade">;
    /**
     * Set whether the carousel should cycle continuously or have hard stops.
     * @return boolean
     * @default true
     */
    readonly wrap: import("@angular/core").InputSignal<boolean>;
    /**
     * Event emitted on carousel item change. [docs]
     * @return number
     */
    readonly itemChange: import("@angular/core").OutputEmitterRef<number>;
    private timerId;
    private activeItemInterval;
    private swipeSubscription?;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    private setListeners;
    private clearListeners;
    set visible(value: boolean);
    get visible(): boolean;
    setTimer(): void;
    resetTimer(): void;
    private carouselStateSubscribe;
    private intersectionServiceSubscribe;
    private swipeSubscribe;
    static ɵfac: i0.ɵɵFactoryDeclaration<CarouselComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CarouselComponent, "c-carousel", ["cCarousel"], { "activeIndexInput": { "alias": "activeIndex"; "required": false; "isSignal": true; }; "animateInput": { "alias": "animate"; "required": false; "isSignal": true; }; "directionInput": { "alias": "direction"; "required": false; "isSignal": true; }; "intervalInput": { "alias": "interval"; "required": false; "isSignal": true; }; "pause": { "alias": "pause"; "required": false; "isSignal": true; }; "touch": { "alias": "touch"; "required": false; "isSignal": true; }; "transition": { "alias": "transition"; "required": false; "isSignal": true; }; "wrap": { "alias": "wrap"; "required": false; "isSignal": true; }; }, { "itemChange": "itemChange"; }, never, ["*"], true, [{ directive: typeof i1.ThemeDirective; inputs: { "dark": "dark"; }; outputs: {}; }]>;
}
