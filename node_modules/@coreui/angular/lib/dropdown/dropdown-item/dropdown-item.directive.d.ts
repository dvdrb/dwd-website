import { FocusableOption, FocusOrigin } from '@angular/cdk/a11y';
import { DropdownComponent } from '../dropdown/dropdown.component';
import * as i0 from "@angular/core";
export declare class DropdownItemDirective implements FocusableOption {
    #private;
    dropdown?: DropdownComponent | null | undefined;
    /**
     * Set active state to a dropdown-item.
     * @return boolean
     * @default undefined
     */
    readonly active: import("@angular/core").InputSignal<boolean | undefined>;
    /**
     * Configure dropdown-item close dropdown behavior.
     * @return boolean
     * @default true
     */
    readonly autoClose: import("@angular/core").InputSignal<boolean>;
    /**
     * Disables a dropdown-item.
     * @return boolean
     * @default undefined
     */
    readonly disabledInput: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    set disabled(value: boolean);
    get disabled(): boolean;
    readonly role: import("@angular/core").InputSignal<string>;
    readonly tabIndexInput: import("@angular/core").InputSignal<string | number | null>;
    readonly tabIndex: import("@angular/core").WritableSignal<string | number | null>;
    focus(origin?: FocusOrigin | undefined): void;
    getLabel?(): string;
    readonly ariaCurrent: import("@angular/core").Signal<"true" | null>;
    readonly hostClasses: import("@angular/core").Signal<Record<string, boolean>>;
    onClick($event: MouseEvent): void;
    onKeyUp($event: KeyboardEvent): void;
    private handleInteraction;
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DropdownItemDirective, "[cDropdownItem]", ["cDropdownItem"], { "active": { "alias": "active"; "required": false; "isSignal": true; }; "autoClose": { "alias": "autoClose"; "required": false; "isSignal": true; }; "disabledInput": { "alias": "disabled"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; "tabIndexInput": { "alias": "tabIndex"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
